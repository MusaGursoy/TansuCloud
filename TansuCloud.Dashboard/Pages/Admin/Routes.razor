@page "/admin/routes"
@layout TansuCloud.Dashboard.Pages.Admin.AdminLayout
@using System.Text.Json
@inject HttpClient Http

<h2>YARP Routes</h2>

<div class="mb-3">
	<div class="d-flex align-items-center gap-2">
		<button class="btn btn-sm btn-outline-secondary" @onclick="LoadAsync">Refresh</button>
		<button class="btn btn-sm btn-primary" @onclick="ApplyAsync" disabled="@(!_canApply)">Apply</button>
		<button class="btn btn-sm btn-warning" @onclick="RollbackAsync">Rollback</button>
		<button class="btn btn-sm btn-outline-info" @onclick="CheckHealthAsync">Check health</button>
		<div class="ms-3 text-muted">@_summaryText</div>
	</div>
	<div class="mt-2 d-flex align-items-center gap-2">
		<label class="col-form-label">Admin CSRF (if configured)</label>
		<input class="form-control" style="max-width: 280px;" @bind="_csrf" placeholder="X-Tansu-Csrf value" />
		@if (!string.IsNullOrEmpty(_msg))
		{
			<span class="ms-2">@_msg</span>
		}
	</div>
	@if (!string.IsNullOrEmpty(_err))
	{
		<div class="text-danger mt-2">@_err</div>
	}
	@if (!string.IsNullOrEmpty(_warn))
	{
		<div class="text-warning mt-2">@_warn</div>
	}
	@if (!string.IsNullOrEmpty(_ok))
	{
		<div class="text-success mt-2">@_ok</div>
	}
    
</div>

<div class="row g-3">
	<div class="col-12 col-xl-6">
		<div class="card p-3 h-100">
			<h5 class="mb-2">Routes JSON</h5>
			<textarea class="form-control" rows="24" @bind="_routesJson" placeholder="Enter routes as a JSON array"></textarea>
		</div>
	</div>
	<div class="col-12 col-xl-6">
		<div class="card p-3 h-100">
			<h5 class="mb-2">Clusters JSON</h5>
			<textarea class="form-control" rows="24" @bind="_clustersJson" placeholder="Enter clusters as a JSON array"></textarea>
		</div>
	</div>
</div>

<div class="row g-3 mt-2">
	<div class="col-12">
		<div class="card p-3">
			<div class="d-flex align-items-center justify-content-between mb-3">
				<h5 class="mb-0">Cluster Health</h5>
				@if (_healthData is not null)
				{
					<span class="badge bg-secondary">Probed: @_healthData.Path</span>
				}
			</div>
			@if (_healthData is null)
			{
				<p class="text-muted">Click "Check health" to probe cluster destinations</p>
			}
			else
			{
				@foreach (var cluster in _healthData.Clusters)
				{
					<div class="mb-3">
						<h6 class="mb-2">
							<span class="badge bg-info">@cluster.ClusterId</span>
							<small class="text-muted ms-2">(@cluster.Destinations.Count destination(s))</small>
						</h6>
						<div class="table-responsive">
							<table class="table table-sm table-bordered" data-testid="health-table-@cluster.ClusterId">
								<thead class="table-light">
									<tr>
										<th>Destination</th>
										<th>Address</th>
										<th>Status</th>
										<th>Elapsed (ms)</th>
										<th>Error</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var dest in cluster.Destinations)
									{
										<tr class="@(dest.Ok ? "table-success" : "table-danger")">
											<td data-testid="dest-name">@dest.Name</td>
											<td data-testid="dest-address"><small class="font-monospace">@dest.Address</small></td>
											<td data-testid="dest-status">
												@if (dest.Ok)
												{
													<span class="badge bg-success">@dest.Status OK</span>
												}
												else
												{
													<span class="badge bg-danger">@(dest.Status > 0 ? dest.Status.ToString() : "N/A")</span>
												}
											</td>
											<td data-testid="dest-elapsed">@dest.ElapsedMs</td>
											<td data-testid="dest-error">
												@if (!string.IsNullOrEmpty(dest.Error))
												{
													<small class="text-danger">@dest.Error</small>
												}
												else
												{
													<span class="text-muted">â€”</span>
												}
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				}
			}
			<details class="mt-2">
				<summary class="text-muted" style="cursor: pointer;">Raw JSON</summary>
				<textarea class="form-control mt-2" rows="8" readonly value="@_healthJson"></textarea>
			</details>
		</div>
	</div>
</div>

@code {
	private string? _routesJson;
	private string? _clustersJson;
	private string? _csrf;
	private string? _err;
	private string? _warn;
	private string? _ok;
	private string? _msg;
	private string? _healthJson;
	private HealthResponse? _healthData;

	private bool _canApply => IsValidJsonArray(_routesJson) && IsValidJsonArray(_clustersJson);
	private string _summaryText => BuildSummaryText();

	protected override async Task OnInitializedAsync()
	{
		await LoadAsync();
	}

	private async Task LoadAsync()
	{
		_err = _warn = _ok = _msg = null;
		try
		{
			var res = await Http.GetAsync("/admin/api/routes");
			res.EnsureSuccessStatusCode();
			var json = await res.Content.ReadAsStringAsync();
			using var doc = JsonDocument.Parse(json);
			// Expecting { routes: [...], clusters: [...] }
			var hasRoutes = doc.RootElement.TryGetProperty("routes", out var routesEl);
			var hasClusters = doc.RootElement.TryGetProperty("clusters", out var clustersEl);
			if (!hasRoutes || !hasClusters)
			{
				_warn = "Unexpected payload shape from server";
			}
			_routesJson = hasRoutes ? ToIndentedJson(routesEl) : "[]";
			_clustersJson = hasClusters ? ToIndentedJson(clustersEl) : "[]";
		}
		catch (Exception ex)
		{
			_err = ex.Message;
		}
	}

	private async Task CheckHealthAsync()
	{
		_err = _warn = _ok = _msg = null;
		_healthData = null;
		try
		{
			var res = await Http.GetAsync("/admin/api/routes/health");
			if (res.IsSuccessStatusCode)
			{
				var json = await res.Content.ReadAsStringAsync();
				_healthJson = json;
				
				// Parse the response into our model for display
				using var doc = JsonDocument.Parse(json);
				var root = doc.RootElement;
				var path = root.GetProperty("path").GetString() ?? "/health/ready";
				var clusters = new List<ClusterHealth>();
				
				if (root.TryGetProperty("clusters", out var clustersEl))
				{
					foreach (var clusterEl in clustersEl.EnumerateArray())
					{
						var clusterId = clusterEl.GetProperty("clusterId").GetString() ?? "unknown";
						var destinations = new List<DestinationHealth>();
						
						if (clusterEl.TryGetProperty("destinations", out var destsEl))
						{
							foreach (var destEl in destsEl.EnumerateArray())
							{
								destinations.Add(new DestinationHealth
								{
									Name = destEl.GetProperty("name").GetString() ?? "unknown",
									Address = destEl.GetProperty("address").GetString() ?? string.Empty,
									Status = destEl.GetProperty("status").GetInt32(),
									Ok = destEl.GetProperty("ok").GetBoolean(),
									ElapsedMs = destEl.GetProperty("elapsedMs").GetInt64(),
									Error = destEl.TryGetProperty("error", out var errEl) && errEl.ValueKind != JsonValueKind.Null 
										? errEl.GetString() 
										: null
								});
							}
						}
						
						clusters.Add(new ClusterHealth
						{
							ClusterId = clusterId,
							Destinations = destinations
						});
					}
				}
				
				_healthData = new HealthResponse
				{
					Path = path,
					Clusters = clusters
				};
				_ok = "Health checked";
			}
			else
			{
				_err = $"Health check failed: {(int)res.StatusCode} {res.ReasonPhrase}";
				_healthJson = await res.Content.ReadAsStringAsync();
			}
		}
		catch (Exception ex)
		{
			_err = ex.Message;
		}
	}

	private async Task ApplyAsync()
	{
		_err = _warn = _ok = _msg = null;
		if (!_canApply)
		{
			_warn = "Routes and Clusters must both be valid JSON arrays";
			return;
		}
		try
		{
			var body = $"{{\"routes\":{_routesJson},\"clusters\":{_clustersJson}}}";
			using var req = new HttpRequestMessage(HttpMethod.Post, "/admin/api/routes")
			{
				Content = new StringContent(body, System.Text.Encoding.UTF8, "application/json")
			};
			if (!string.IsNullOrWhiteSpace(_csrf)) req.Headers.Add("X-Tansu-Csrf", _csrf);
			var res = await Http.SendAsync(req);
			if (res.IsSuccessStatusCode)
			{
				_ok = "Applied";
				// Display returned snapshot (authoritative server shape)
				var json = await res.Content.ReadAsStringAsync();
				using var doc = JsonDocument.Parse(json);
				_routesJson = ToIndentedJson(doc.RootElement.GetProperty("routes"));
				_clustersJson = ToIndentedJson(doc.RootElement.GetProperty("clusters"));
			}
			else
			{
				_err = $"Apply failed: {(int)res.StatusCode} {res.ReasonPhrase}";
				var details = await res.Content.ReadAsStringAsync();
				if (!string.IsNullOrWhiteSpace(details))
				{
					_msg = details;
				}
			}
		}
		catch (Exception ex)
		{
			_err = ex.Message;
		}
	}

	private async Task RollbackAsync()
	{
		_err = _warn = _ok = _msg = null;
		try
		{
			using var req = new HttpRequestMessage(HttpMethod.Post, "/admin/api/routes/rollback");
			if (!string.IsNullOrWhiteSpace(_csrf)) req.Headers.Add("X-Tansu-Csrf", _csrf);
			var res = await Http.SendAsync(req);
			if (res.IsSuccessStatusCode)
			{
				_ok = "Rolled back";
				var json = await res.Content.ReadAsStringAsync();
				using var doc = JsonDocument.Parse(json);
				_routesJson = ToIndentedJson(doc.RootElement.GetProperty("routes"));
				_clustersJson = ToIndentedJson(doc.RootElement.GetProperty("clusters"));
			}
			else
			{
				_err = $"Rollback failed: {(int)res.StatusCode} {res.ReasonPhrase}";
				_msg = await res.Content.ReadAsStringAsync();
			}
		}
		catch (Exception ex)
		{
			_err = ex.Message;
		}
	}

	private static bool IsValidJsonArray(string? text)
	{
		if (string.IsNullOrWhiteSpace(text)) return false;
		try
		{
			using var doc = JsonDocument.Parse(text);
			return doc.RootElement.ValueKind == JsonValueKind.Array;
		}
		catch
		{
			return false;
		}
	}

	private static string ToIndentedJson(JsonElement el)
	{
		var opts = new JsonSerializerOptions { WriteIndented = true };
		return JsonSerializer.Serialize(el, opts);
	}

	private string BuildSummaryText()
	{
		try
		{
			var routesCount = 0;
			var clustersCount = 0;
			if (!string.IsNullOrWhiteSpace(_routesJson))
			{
				using var rd = JsonDocument.Parse(_routesJson);
				if (rd.RootElement.ValueKind == JsonValueKind.Array)
					routesCount = rd.RootElement.GetArrayLength();
			}
			if (!string.IsNullOrWhiteSpace(_clustersJson))
			{
				using var cd = JsonDocument.Parse(_clustersJson);
				if (cd.RootElement.ValueKind == JsonValueKind.Array)
					clustersCount = cd.RootElement.GetArrayLength();
			}
			return $"Routes: {routesCount}, Clusters: {clustersCount}";
		}
		catch
		{
			return string.Empty;
		}
	}

	// Health check response models
	private record HealthResponse
	{
		public string Path { get; init; } = string.Empty;
		public List<ClusterHealth> Clusters { get; init; } = new();
	}

	private record ClusterHealth
	{
		public string ClusterId { get; init; } = string.Empty;
		public List<DestinationHealth> Destinations { get; init; } = new();
	}

	private record DestinationHealth
	{
		public string Name { get; init; } = string.Empty;
		public string Address { get; init; } = string.Empty;
		public int Status { get; init; }
		public bool Ok { get; init; }
		public long ElapsedMs { get; init; }
		public string? Error { get; init; }
	}
}
