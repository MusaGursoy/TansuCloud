@page "/admin/metrics"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using TansuCloud.Dashboard.Observability
@inject IPrometheusQueryService Prom

<h1>Metrics</h1>

<div class="filters">
    <label>Chart:
    <select @bind="chartId">
            <option value="storage.cache.hitratio">Storage cache hit ratio</option>
            <option value="storage.http.rps">Storage HTTP RPS</option>
            <option value="storage.http.errors">Storage HTTP 5xx rate</option>
            <option value="storage.http.latency.p95">Storage latency p95</option>
        </select>
    </label>
    <label>Service:
    <select @bind="service">
            <option value="">All</option>
            <option value="tansu.storage">tansu.storage</option>
        </select>
    </label>
    <label>Tenant:
    <input @bind="tenant" placeholder="optional tid" />
    </label>
    <label>Range:
    <select @bind="rangeMinutes">
            <option value="5">5m</option>
            <option value="10">10m</option>
            <option value="30">30m</option>
            <option value="60">1h</option>
        </select>
    </label>
    <button class="btn btn-primary" @onclick="LoadAsync">Refresh</button>
    @if (loading) { <span>Loadingâ€¦</span> }
    @if (!string.IsNullOrEmpty(error)) { <span class="text-danger">@error</span> }
 </div>

<h3>@GetChartTitle(chartId)</h3>
<div>
    @if (series.Count == 0 && !loading)
    {
        <p>No data.</p>
    }
    else
    {
        <table class="table table-sm">
            <thead>
                @if (chartId == "storage.cache.hitratio")
                {
                    <tr>
                        <th>Service</th>
                        <th>Operation</th>
                        <th>Latest</th>
                        <th>Sparkline</th>
                    </tr>
                }
                else if (chartId == "storage.http.rps")
                {
                    <tr>
                        <th>Op</th>
                        <th>Status</th>
                        <th>RPS</th>
                        <th>Sparkline</th>
                    </tr>
                }
                else if (chartId == "storage.http.errors")
                {
                    <tr>
                        <th>Op</th>
                        <th>Rate (5xx/s)</th>
                        <th>Sparkline</th>
                    </tr>
                }
                else if (chartId == "storage.http.latency.p95")
                {
                    <tr>
                        <th>Op</th>
                        <th>p95 (ms)</th>
                        <th>Sparkline</th>
                    </tr>
                }
            </thead>
            <tbody>
                @foreach (var s in series)
                {
                    if (chartId == "storage.cache.hitratio")
                    {
                        <tr>
                            <td>@(s.metric.TryGetValue("service", out var sv) ? sv : "-")</td>
                            <td>@(s.metric.TryGetValue("operation", out var op) ? op : "-")</td>
                            <td>@FormatPercent(s)</td>
                            <td>@(RenderSparklineSvg(s, 200, 40))</td>
                        </tr>
                    }
                    else if (chartId == "storage.http.rps")
                    {
                        <tr>
                            <td>@(s.metric.TryGetValue("op", out var op) ? op : "-")</td>
                            <td>@(s.metric.TryGetValue("status", out var st) ? st : "-")</td>
                            <td>@FormatNumber(s)</td>
                            <td>@(RenderSparklineSvg(s, 200, 40))</td>
                        </tr>
                    }
                    else if (chartId == "storage.http.errors")
                    {
                        <tr>
                            <td>@(s.metric.TryGetValue("op", out var op) ? op : "-")</td>
                            <td>@FormatNumber(s)</td>
                            <td>@(RenderSparklineSvg(s, 200, 40))</td>
                        </tr>
                    }
                    else if (chartId == "storage.http.latency.p95")
                    {
                        <tr>
                            <td>@(s.metric.TryGetValue("op", out var op) ? op : "-")</td>
                            <td>@FormatMillis(s)</td>
                            <td>@(RenderSparklineSvg(s, 200, 40))</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
 </div>

@code {
    private string? tenant;
    private string? service;
    private string chartId = "storage.http.rps";
    private int rangeMinutes = 10;
    private bool loading;
    private string? error;
    private List<PromSeries> series = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        loading = true; error = null; series.Clear();
        try
        {
            var result = await Prom.QueryRangeAsync(chartId, tenant, service, TimeSpan.FromMinutes(rangeMinutes), TimeSpan.FromSeconds(30));
            if (result?.result != null)
            {
                series = result.result;
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private static string FormatPercent(PromSeries s)
    {
        if (s.values.Count == 0) return "-";
        var last = s.values[^1];
        if (last.Length >= 2 && last[1] is string str && double.TryParse(str, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out var v))
        {
            return v.ToString("P1");
        }
        return "-";
    }

    private static string FormatNumber(PromSeries s)
    {
        if (s.values.Count == 0) return "-";
        var last = s.values[^1];
        if (last.Length >= 2 && last[1] is string str && double.TryParse(str, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out var v))
        {
            return v.ToString("0.###");
        }
        return "-";
    }

    private static string FormatMillis(PromSeries s)
    {
        if (s.values.Count == 0) return "-";
        var last = s.values[^1];
        if (last.Length >= 2 && last[1] is string str && double.TryParse(str, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out var v))
        {
            return v.ToString("0.##");
        }
        return "-";
    }

    private static string GetChartTitle(string id) => id switch
    {
        "storage.cache.hitratio" => "Storage cache hit ratio (by operation)",
        "storage.http.rps" => "Storage HTTP requests per second",
        "storage.http.errors" => "Storage HTTP 5xx errors per second",
        "storage.http.latency.p95" => "Storage HTTP latency p95 (ms)",
        _ => id
    };

    private static MarkupString RenderSparklineSvg(PromSeries s, int width, int height)
    {
        // Extract up to last 50 points
        var points = new List<double>();
        foreach (var v in s.values)
        {
            if (v.Length >= 2 && v[1] is string str && double.TryParse(str, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out var dv))
                points.Add(dv);
        }
        if (points.Count == 0)
            return new MarkupString("<svg width=\"200\" height=\"40\"></svg>");
        var take = Math.Min(50, points.Count);
        var tail = points.Skip(points.Count - take).ToArray();
        var max = Math.Max(1e-9, tail.Max());
        var min = Math.Min(0.0, tail.Min());
        var range = Math.Max(1e-9, max - min);
        // Build polyline points scaled to width/height, y inverted (0 top)
        var step = (double)(width - 2) / Math.Max(1, tail.Length - 1);
        var yScale = (height - 2) / range;
        var pts = new List<string>();
        for (int i = 0; i < tail.Length; i++)
        {
            var x = 1 + i * step;
            var y = 1 + (max - tail[i]) * yScale;
            pts.Add($"{x.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture)},{y.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture)}");
        }
        var poly = string.Join(" ", pts);
        var svg = $"<svg width=\"{width}\" height=\"{height}\"><polyline fill=\"none\" stroke=\"#0d6efd\" stroke-width=\"2\" points=\"{poly}\" /></svg>";
        return new MarkupString(svg);
    }
}
