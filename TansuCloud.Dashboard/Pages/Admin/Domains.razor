@page "/admin/domains"
@layout TansuCloud.Dashboard.Pages.Admin.AdminLayout
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JS

<h2>Domains & TLS</h2>

<div class="mb-4">
    <h5>Current bindings</h5>
    @if (_bindings is null)
    {
        <p>Loadingâ€¦</p>
    }
    else if (_bindings.Count == 0)
    {
        <p class="text-muted">No bindings yet.</p>
    }
    else
    {
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Host</th>
                    <th>Subject</th>
                    <th>Issuer</th>
                    <th>Thumbprint</th>
                    <th>Valid To</th>
                    <th>Hostname Match</th>
                    <th>Chain</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
            @foreach (var b in _bindings)
            {
                <tr>
                    <td>@b.Host</td>
                    <td>@b.Subject</td>
                    <td>@b.Issuer</td>
                    <td><code>@b.Thumbprint</code></td>
                    <td>@b.NotAfter.ToLocalTime()</td>
                    <td>@(b.HostnameMatches ? "Yes" : "No")</td>
                    <td>
                        @if (b.ChainProvided)
                        {
                            <span title="Chain count and linkage">@b.ChainCount @(b.ChainValidated ? "(linked)" : "(unlinked)")</span>
                        }
                        else
                        {
                            <span class="text-muted">-</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveAsync(b.Host)">Remove</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    <button class="btn btn-sm btn-outline-secondary" @onclick="LoadAsync">Refresh</button>
    @if (!string.IsNullOrEmpty(_err))
    {
        <div class="text-danger mt-2">@_err</div>
    }
</div>

<div class="card p-3">
    <h5>Add or replace binding</h5>
    <div class="row g-2 align-items-center">
        <div class="col-auto">
            <label class="col-form-label">Host</label>
        </div>
        <div class="col-auto">
            <input class="form-control" @bind="_host" placeholder="e.g. app.example.com" />
        </div>
    </div>
    <div class="row g-2 align-items-center mt-2">
        <div class="col-auto">
            <label class="col-form-label">PFX file</label>
        </div>
        <div class="col-auto">
            <InputFile OnChange="OnInputFileChanged" />
        </div>
    </div>
    <div class="row g-2 align-items-center mt-2">
        <div class="col-auto">
            <label class="col-form-label">Password (optional)</label>
        </div>
        <div class="col-auto">
            <input class="form-control" type="password" @bind="_pfxPassword" />
        </div>
    </div>
    <div class="row g-2 align-items-center mt-3">
        <div class="col-12">
            <div class="text-muted">Or paste PEM certificate + private key</div>
        </div>
        <div class="col-12 mt-2">
            <label class="form-label">PEM certificate</label>
            <textarea class="form-control" rows="4" @bind="_certPem" placeholder="-----BEGIN CERTIFICATE-----"></textarea>
        </div>
        <div class="col-12 mt-2">
            <label class="form-label">PEM private key</label>
            <textarea class="form-control" rows="6" @bind="_keyPem" placeholder="-----BEGIN PRIVATE KEY-----"></textarea>
        </div>
        <div class="col-12 mt-2">
            <label class="form-label">PEM chain (optional)</label>
            <textarea class="form-control" rows="6" @bind="_chainPem" placeholder="Concatenate intermediate certificates in PEM format"></textarea>
        </div>
    </div>
    <div class="row g-2 align-items-center mt-2">
        <div class="col-auto">
            <label class="col-form-label">Admin CSRF (if configured)</label>
        </div>
        <div class="col-auto">
            <input class="form-control" @bind="_csrf" placeholder="X-Tansu-Csrf value" />
        </div>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" disabled="@(!_canSave)" @onclick="SaveAsync">Save (PFX)</button>
        <button class="btn btn-outline-primary ms-2" disabled="@(!_canSavePem)" @onclick="SavePemAsync">Save (PEM)</button>
        @if (!string.IsNullOrEmpty(_saveMsg))
        {
            <span class="ms-2">@_saveMsg</span>
        }
    </div>
</div>

<div class="card p-3 mt-3">
    <h5>Rotate certificate</h5>
    <div class="row g-2 align-items-center">
        <div class="col-auto">
            <label class="col-form-label">Host</label>
        </div>
        <div class="col-auto">
            <input class="form-control" @bind="_rotateHost" placeholder="host to rotate" />
        </div>
    </div>
    <div class="row g-2 align-items-center mt-2">
        <div class="col-auto">
            <label class="col-form-label">PFX file (alt.)</label>
        </div>
        <div class="col-auto">
            <InputFile OnChange="OnRotatePfxChanged" />
        </div>
        <div class="col-auto">
            <input class="form-control" type="password" @bind="_rotatePfxPwd" placeholder="PFX password (optional)" />
        </div>
    </div>
    <div class="row g-2 align-items-center mt-2">
        <div class="col-12">
            <label class="form-label">PEM certificate</label>
            <textarea class="form-control" rows="4" @bind="_rotateCertPem" placeholder="-----BEGIN CERTIFICATE-----"></textarea>
        </div>
    </div>
    <div class="row g-2 align-items-center mt-2">
        <div class="col-12">
            <label class="form-label">PEM private key</label>
            <textarea class="form-control" rows="6" @bind="_rotateKeyPem" placeholder="-----BEGIN PRIVATE KEY-----"></textarea>
        </div>
    </div>
    <div class="row g-2 align-items-center mt-2">
        <div class="col-12">
            <label class="form-label">PEM chain (optional)</label>
            <textarea class="form-control" rows="6" @bind="_rotateChainPem" placeholder="Concatenate intermediate certificates in PEM format"></textarea>
        </div>
    </div>
    <div class="mt-3">
        <button class="btn btn-warning" disabled="@(!_canRotate)" @onclick="RotateAsync">Rotate</button>
        @if (!string.IsNullOrEmpty(_rotateMsg))
        {
            <span class="ms-2">@_rotateMsg</span>
        }
    </div>
</div>

@code {
    private List<DomainBindingInfo>? _bindings;
    private string? _err;
    private string _host = string.Empty;
    private byte[]? _pfxBytes;
    private string? _pfxPassword;
    private string? _saveMsg;
    private string? _csrf;

    // PEM state
    private string? _certPem;
    private string? _keyPem;
    private string? _chainPem;

    // Rotate state
    private string _rotateHost = string.Empty;
    private byte[]? _rotatePfx;
    private string? _rotatePfxPwd;
    private string? _rotateCertPem;
    private string? _rotateKeyPem;
    private string? _rotateChainPem;
    private string? _rotateMsg;

    private bool _canSave => !string.IsNullOrWhiteSpace(_host) && _pfxBytes is not null;
    private bool _canSavePem => !string.IsNullOrWhiteSpace(_host) && !string.IsNullOrWhiteSpace(_certPem) && !string.IsNullOrWhiteSpace(_keyPem);
    private bool _canRotate
        => !string.IsNullOrWhiteSpace(_rotateHost) && (
                (_rotatePfx is not null) || (!string.IsNullOrWhiteSpace(_rotateCertPem) && !string.IsNullOrWhiteSpace(_rotateKeyPem))
           );

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            _err = null;
            var res = await Http.GetAsync("/admin/api/domains");
            res.EnsureSuccessStatusCode();
            var json = await res.Content.ReadAsStringAsync();
            _bindings = JsonSerializer.Deserialize<List<DomainBindingInfo>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
        }
        catch (Exception ex)
        {
            _err = ex.Message;
        }
    }

    private async Task SaveAsync()
    {
        _saveMsg = null;
        try
        {
            if (_pfxBytes is null) return;
            var payload = new {
                host = _host,
                pfxBase64 = Convert.ToBase64String(_pfxBytes),
                pfxPassword = _pfxPassword
            };
            using var req = new HttpRequestMessage(HttpMethod.Post, "/admin/api/domains")
            {
                Content = JsonContent.Create(payload)
            };
            if (!string.IsNullOrWhiteSpace(_csrf)) req.Headers.Add("X-Tansu-Csrf", _csrf);
            var res = await Http.SendAsync(req);
            if (res.IsSuccessStatusCode)
            {
                _saveMsg = "Saved";
                await LoadAsync();
            }
            else
            {
                _saveMsg = $"Error: {(int)res.StatusCode} {res.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            _saveMsg = ex.Message;
        }
    }

    private async Task SavePemAsync()
    {
        _saveMsg = null;
        try
        {
            if (string.IsNullOrWhiteSpace(_certPem) || string.IsNullOrWhiteSpace(_keyPem)) return;
            var payload = new {
                host = _host,
                certPem = _certPem,
                keyPem = _keyPem,
                chainPem = _chainPem
            };
            using var req = new HttpRequestMessage(HttpMethod.Post, "/admin/api/domains/pem")
            {
                Content = JsonContent.Create(payload)
            };
            if (!string.IsNullOrWhiteSpace(_csrf)) req.Headers.Add("X-Tansu-Csrf", _csrf);
            var res = await Http.SendAsync(req);
            if (res.IsSuccessStatusCode)
            {
                _saveMsg = "Saved (PEM)";
                await LoadAsync();
            }
            else
            {
                _saveMsg = $"Error: {(int)res.StatusCode} {res.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            _saveMsg = ex.Message;
        }
    }

    private async Task RemoveAsync(string host)
    {
        try
        {
            var res = await Http.DeleteAsync($"/admin/api/domains/{Uri.EscapeDataString(host)}");
            if (res.IsSuccessStatusCode)
            {
                await LoadAsync();
            }
            else
            {
                _err = $"Delete failed: {(int)res.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            _err = ex.Message;
        }
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _pfxBytes = null;
        var file = e.File;
        if (file is null)
            return;
        await using var stream = file.OpenReadStream(maxAllowedSize: 512 * 1024); // 512 KB limit for PFX
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        _pfxBytes = ms.ToArray();
    }

    private async Task OnRotatePfxChanged(InputFileChangeEventArgs e)
    {
        _rotatePfx = null;
        var file = e.File;
        if (file is null) return;
        await using var stream = file.OpenReadStream(maxAllowedSize: 512 * 1024);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        _rotatePfx = ms.ToArray();
    }

    private async Task RotateAsync()
    {
        _rotateMsg = null;
        try
        {
            // Confirmation prompt for safety
            if (string.IsNullOrWhiteSpace(_rotateHost)) return;
            var confirmText = $"Rotate certificate for '{_rotateHost}'? This will replace the current binding.";
            if (!await JS.InvokeAsync<bool>("confirm", confirmText))
            {
                _rotateMsg = "Cancelled";
                return;
            }
            object payload;
            if (_rotatePfx is not null)
            {
                payload = new { host = _rotateHost, pfxBase64 = Convert.ToBase64String(_rotatePfx), pfxPassword = _rotatePfxPwd };
            }
            else
            {
                payload = new { host = _rotateHost, certPem = _rotateCertPem, keyPem = _rotateKeyPem, chainPem = _rotateChainPem };
            }
            using var req = new HttpRequestMessage(HttpMethod.Post, "/admin/api/domains/rotate")
            {
                Content = JsonContent.Create(payload)
            };
            if (!string.IsNullOrWhiteSpace(_csrf)) req.Headers.Add("X-Tansu-Csrf", _csrf);
            var res = await Http.SendAsync(req);
            if (res.IsSuccessStatusCode)
            {
                try
                {
                    var json = await res.Content.ReadAsStringAsync();
                    var doc = JsonDocument.Parse(json);
                    var cur = doc.RootElement.GetProperty("current");
                    string curThumb = cur.GetProperty("thumbprint").GetString() ?? string.Empty;
                    DateTimeOffset curExp = cur.GetProperty("notAfter").GetDateTimeOffset();
                    string? prevThumb = null;
                    DateTimeOffset? prevExp = null;
                    if (doc.RootElement.TryGetProperty("previous", out var prev) && prev.ValueKind != JsonValueKind.Null)
                    {
                        prevThumb = prev.GetProperty("thumbprint").GetString();
                        prevExp = prev.GetProperty("notAfter").GetDateTimeOffset();
                    }
                    _rotateMsg = prevThumb is null
                        ? $"Rotated. New thumbprint: {curThumb}, expires {curExp.ToLocalTime()}"
                        : $"Rotated. New {curThumb} (exp {curExp.ToLocalTime()}), prev {prevThumb} (exp {prevExp?.ToLocalTime()})";
                }
                catch
                {
                    _rotateMsg = "Rotated";
                }
                await LoadAsync();
            }
            else
            {
                _rotateMsg = $"Error: {(int)res.StatusCode} {res.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            _rotateMsg = ex.Message;
        }
    }

    public sealed class DomainBindingInfo
    {
        public string Host { get; set; } = string.Empty;
        public string Subject { get; set; } = string.Empty;
        public string Issuer { get; set; } = string.Empty;
        public string Thumbprint { get; set; } = string.Empty;
        public DateTimeOffset NotBefore { get; set; }
        public DateTimeOffset NotAfter { get; set; }
        public bool HasPrivateKey { get; set; }
        public bool HostnameMatches { get; set; }
        public bool ChainProvided { get; set; }
        public bool ChainValidated { get; set; }
        public int ChainCount { get; set; }
    } // End of Class DomainBindingInfo
}
