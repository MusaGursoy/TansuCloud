@page "/admin/policy-center"
@using System.Net.Http.Json
@using System.Text.Json
@attribute [Authorize(Policy = "AdminOnly")]
@layout AdminLayout
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<PolicyCenter> Logger

<PageTitle>Policy Center | TansuCloud Admin</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <h2 class="mb-0">Policy Center</h2>
            <p class="text-muted">Manage CORS and IP allow/deny policies with staged rollout.</p>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowCreateDialog">
                <i class="bi bi-plus-circle"></i> Create Policy
            </button>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error:</strong> @_errorMessage
            <button type="button" class="btn-close" @onclick="() => _errorMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(_successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>Success:</strong> @_successMessage
            <button type="button" class="btn-close" @onclick="() => _successMessage = null"></button>
        </div>
    }

    <!-- Filters -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label class="form-label">Filter by Type:</label>
            <select class="form-select" @bind="_filterType">
                <option value="">All Types</option>
                <option value="Cors">CORS</option>
                <option value="IpAllow">IP Allow</option>
                <option value="IpDeny">IP Deny</option>
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">Filter by Mode:</label>
            <select class="form-select" @bind="_filterMode">
                <option value="">All Modes</option>
                <option value="Shadow">Shadow</option>
                <option value="AuditOnly">Audit Only</option>
                <option value="Enforce">Enforce</option>
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button class="btn btn-outline-secondary" @onclick="ApplyFilters">
                <i class="bi bi-funnel"></i> Apply Filters
            </button>
            <button class="btn btn-outline-secondary ms-2" @onclick="ClearFilters">
                <i class="bi bi-x-circle"></i> Clear
            </button>
        </div>
    </div>

    @if (_loading)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (_policies != null && _filteredPolicies.Any())
    {
        <!-- Policy List -->
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Type</th>
                        <th>Mode</th>
                        <th>Description</th>
                        <th>Updated</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var policy in _filteredPolicies)
                    {
                        <tr>
                            <td><code>@policy.Id</code></td>
                            <td>
                                <span class="badge @GetTypeBadgeClass(policy.Type)">
                                    @policy.Type
                                </span>
                            </td>
                            <td>
                                <span class="badge @GetModeBadgeClass(policy.Mode)">
                                    @policy.Mode
                                </span>
                            </td>
                            <td>@policy.Description</td>
                            <td>@policy.UpdatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditDialog(policy)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => ShowDeleteConfirm(policy)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            No policies found. Click "Create Policy" to add your first policy.
        </div>
    }

    <!-- Legend -->
    <div class="row mt-4">
        <div class="col">
            <h5>Enforcement Modes:</h5>
            <ul>
                <li><strong>Shadow</strong>: Policy evaluated but not enforced; violations logged for analysis.</li>
                <li><strong>Audit Only</strong>: Policy evaluated, violations logged and alerted, but not blocked.</li>
                <li><strong>Enforce</strong>: Policy actively enforced; violations blocked.</li>
            </ul>
        </div>
    </div>
</div>

<!-- Create/Edit Modal (simplified for MVP) -->
@if (_showDialog)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(_editingPolicy == null ? "Create Policy" : "Edit Policy")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Policy ID</label>
                        <input type="text" class="form-control" @bind="_dialogPolicy.Id" disabled="@(_editingPolicy != null)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Type</label>
                        <select class="form-select" @bind="_dialogPolicy.Type">
                            <option value="Cors">CORS</option>
                            <option value="IpAllow">IP Allow</option>
                            <option value="IpDeny">IP Deny</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Enforcement Mode</label>
                        <select class="form-select" @bind="_dialogPolicy.Mode">
                            <option value="Shadow">Shadow (Log only)</option>
                            <option value="AuditOnly">Audit Only (Log + Alert)</option>
                            <option value="Enforce">Enforce (Block/Allow)</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" class="form-control" @bind="_dialogPolicy.Description" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Configuration (JSON)</label>
                        <textarea class="form-control font-monospace" rows="10" @bind="_dialogPolicy.ConfigJson" placeholder="Enter policy configuration as JSON"></textarea>
                        <small class="form-text text-muted">
                            Example CORS: {"origins": ["https://example.com"], "methods": ["GET", "POST"], "headers": ["*"], "allowCredentials": false}<br/>
                            Example IP: {"cidrs": ["192.168.1.0/24", "10.0.0.1"], "description": "Office network"}
                        </small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SavePolicy" disabled="@_saving">
                        @if (_saving)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        Save Policy
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (_showDeleteConfirm && _deletingPolicy != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteConfirm"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this policy?</p>
                    <p><strong>ID:</strong> @_deletingPolicy.Id</p>
                    <p><strong>Type:</strong> @_deletingPolicy.Type</p>
                    <p><strong>Description:</strong> @_deletingPolicy.Description</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirm">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@_deleting">
                        @if (_deleting)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        Delete Policy
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool _loading = true;
    private bool _saving = false;
    private bool _deleting = false;
    private string? _errorMessage;
    private string? _successMessage;
    private List<PolicyViewModel>? _policies;
    private List<PolicyViewModel> _filteredPolicies = new();
    private string _filterType = "";
    private string _filterMode = "";

    private bool _showDialog = false;
    private bool _showDeleteConfirm = false;
    private PolicyViewModel? _editingPolicy;
    private PolicyViewModel? _deletingPolicy;
    private PolicyDialogModel _dialogPolicy = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPolicies();
    } // End of Method OnInitializedAsync

    private async Task LoadPolicies()
    {
        _loading = true;
        _errorMessage = null;

        try
        {
            var client = HttpClientFactory.CreateClient("Gateway");
            var response = await client.GetAsync("/admin/api/policies");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<JsonElement>();
                _policies = new List<PolicyViewModel>();

                if (json.ValueKind == JsonValueKind.Array)
                {
                    foreach (var item in json.EnumerateArray())
                    {
                        _policies.Add(new PolicyViewModel
                        {
                            Id = item.GetProperty("id").GetString() ?? "",
                            Type = item.GetProperty("type").GetString() ?? "",
                            Mode = item.GetProperty("mode").GetString() ?? "",
                            Description = item.TryGetProperty("description", out var desc) ? desc.GetString() ?? "" : "",
                            UpdatedAt = item.TryGetProperty("updatedAt", out var updated) ? updated.GetDateTime() : DateTime.UtcNow,
                            Config = item.GetProperty("config")
                        });
                    }
                }

                ApplyFilters();
            }
            else
            {
                _errorMessage = $"Failed to load policies: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading policies: {ex.Message}";
            Logger.LogError(ex, "Error loading policies");
        }
        finally
        {
            _loading = false;
        }
    } // End of Method LoadPolicies

    private void ApplyFilters()
    {
        if (_policies == null) return;

        _filteredPolicies = _policies.Where(p =>
            (string.IsNullOrWhiteSpace(_filterType) || p.Type.Equals(_filterType, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(_filterMode) || p.Mode.Equals(_filterMode, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    } // End of Method ApplyFilters

    private void ClearFilters()
    {
        _filterType = "";
        _filterMode = "";
        ApplyFilters();
    } // End of Method ClearFilters

    private void ShowCreateDialog()
    {
        _editingPolicy = null;
        _dialogPolicy = new PolicyDialogModel { Mode = "Shadow", Type = "Cors" };
        _showDialog = true;
    } // End of Method ShowCreateDialog

    private void ShowEditDialog(PolicyViewModel policy)
    {
        _editingPolicy = policy;
        _dialogPolicy = new PolicyDialogModel
        {
            Id = policy.Id,
            Type = policy.Type,
            Mode = policy.Mode,
            Description = policy.Description,
            ConfigJson = JsonSerializer.Serialize(policy.Config, new JsonSerializerOptions { WriteIndented = true })
        };
        _showDialog = true;
    } // End of Method ShowEditDialog

    private void CloseDialog()
    {
        _showDialog = false;
        _editingPolicy = null;
        _dialogPolicy = new();
    } // End of Method CloseDialog

    private async Task SavePolicy()
    {
        _saving = true;
        _errorMessage = null;
        _successMessage = null;

        try
        {
            // Validate
            if (string.IsNullOrWhiteSpace(_dialogPolicy.Id))
            {
                _errorMessage = "Policy ID is required.";
                return;
            }

            JsonElement configJson;
            try
            {
                configJson = JsonSerializer.Deserialize<JsonElement>(_dialogPolicy.ConfigJson ?? "{}");
            }
            catch
            {
                _errorMessage = "Invalid JSON in configuration field.";
                return;
            }

            var payload = new
            {
                id = _dialogPolicy.Id,
                type = _dialogPolicy.Type,
                mode = _dialogPolicy.Mode,
                description = _dialogPolicy.Description,
                config = configJson
            };

            var client = HttpClientFactory.CreateClient("Gateway");
            var response = await client.PostAsJsonAsync("/admin/api/policies", payload);

            if (response.IsSuccessStatusCode)
            {
                _successMessage = $"Policy '{_dialogPolicy.Id}' saved successfully.";
                CloseDialog();
                await LoadPolicies();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _errorMessage = $"Failed to save policy: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error saving policy: {ex.Message}";
            Logger.LogError(ex, "Error saving policy");
        }
        finally
        {
            _saving = false;
        }
    } // End of Method SavePolicy

    private void ShowDeleteConfirm(PolicyViewModel policy)
    {
        _deletingPolicy = policy;
        _showDeleteConfirm = true;
    } // End of Method ShowDeleteConfirm

    private void CloseDeleteConfirm()
    {
        _showDeleteConfirm = false;
        _deletingPolicy = null;
    } // End of Method CloseDeleteConfirm

    private async Task ConfirmDelete()
    {
        if (_deletingPolicy == null) return;

        _deleting = true;
        _errorMessage = null;
        _successMessage = null;

        try
        {
            var client = HttpClientFactory.CreateClient("Gateway");
            var response = await client.DeleteAsync($"/admin/api/policies/{_deletingPolicy.Id}");

            if (response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.NoContent)
            {
                _successMessage = $"Policy '{_deletingPolicy.Id}' deleted successfully.";
                CloseDeleteConfirm();
                await LoadPolicies();
            }
            else
            {
                _errorMessage = $"Failed to delete policy: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error deleting policy: {ex.Message}";
            Logger.LogError(ex, "Error deleting policy");
        }
        finally
        {
            _deleting = false;
        }
    } // End of Method ConfirmDelete

    private string GetTypeBadgeClass(string type) => type switch
    {
        "Cors" => "bg-primary",
        "IpAllow" => "bg-success",
        "IpDeny" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetModeBadgeClass(string mode) => mode switch
    {
        "Shadow" => "bg-secondary",
        "AuditOnly" => "bg-warning text-dark",
        "Enforce" => "bg-danger",
        _ => "bg-secondary"
    };

    private class PolicyViewModel
    {
        public string Id { get; set; } = "";
        public string Type { get; set; } = "";
        public string Mode { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime UpdatedAt { get; set; }
        public JsonElement Config { get; set; }
    } // End of Class PolicyViewModel

    private class PolicyDialogModel
    {
        public string Id { get; set; } = "";
        public string Type { get; set; } = "Cors";
        public string Mode { get; set; } = "Shadow";
        public string Description { get; set; } = "";
        public string ConfigJson { get; set; } = "{}";
    } // End of Class PolicyDialogModel
} // End of Class PolicyCenter
