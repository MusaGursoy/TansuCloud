// Tansu.Cloud Public Repository:    https://github.com/MusaGursoy/TansuCloud
@page "/admin/logs"
@layout TansuCloud.Dashboard.Pages.Admin.AdminLayout
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Policy = "AdminOnly")]

<h3>Logs</h3>

<div class="mb-2">
    <button class="btn btn-sm btn-primary" @onclick="Refresh">Refresh</button>
    <button class="btn btn-sm btn-outline-success ms-2" disabled="@isSendingTest" @onclick="SendTestReport">
        @if (isSendingTest)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="ms-1">Sending testâ€¦</span>
        }
        else
        {
            <span>Send test report</span>
        }
    </button>
    <label class="ms-3">
    <input type="checkbox" @bind="runtimeEnabled" @bind:after="Toggle" /> Reporting Enabled (runtime)
    </label>
    <span class="ms-3">Buffered: @bufferCount / @bufferCapacity</span>
    <span class="ms-3">Min Level (capture): @captureMinLevel</span>
    <span class="ms-3">Report every: @status.reportIntervalMinutes min</span>
    <span class="ms-3">Endpoint: @status.mainServerUrl</span>
    <div class="text-muted"><small>Configured: @status.configured; Effective: @status.effective</small></div>
    <div class="text-muted"><small>Pseudonymize tenants: @status.pseudonymizeTenants; Hash secret configured: @status.tenantHashSecretConfigured</small></div>
    <div class="text-muted"><small>Warning sampling: @status.warningSamplingPercent% ; Allowlist: @(status.allowedWarningCategories is { Length: > 0 } cats ? string.Join(", ", cats) : "(none)")</small></div>
    <div class="text-muted"><small>Report kinds: @(status.reportKinds is { Length: > 0 } kinds ? string.Join(", ", kinds) : "(none)")</small></div>
    <div class="mt-2">
        <label>Level:
            <select @bind="filterLevel">
                <option value="">All</option>
                <option>Critical</option>
                <option>Error</option>
                <option>Warning</option>
                <option>Information</option>
                <option>Debug</option>
                <option>Trace</option>
            </select>
        </label>
        <label class="ms-2">Category contains:
            <input @bind="filterCategory" />
        </label>
        <label class="ms-2">Take:
            <input type="number" min="1" max="1000" @bind-value="take" @bind-value:event="oninput" />
        </label>
        <label class="ms-2">Skip:
            <input type="number" min="0" @bind-value="skip" @bind-value:event="oninput" />
        </label>
        <button class="btn btn-sm btn-secondary ms-2" @onclick="ApplyFilters">Apply</button>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @error
    </div>
}
else if (!string.IsNullOrWhiteSpace(lastTestMessage))
{
    <div class="alert alert-info" role="status">
        @lastTestMessage
    </div>
}

<table class="table table-sm table-striped">
    <thead>
        <tr>
            <th>Time (UTC)</th>
            <th>Level</th>
            <th>Category</th>
            <th>Message</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var r in recent)
        {
            <tr>
                <td>@r.Timestamp.ToString("o")</td>
                <td>@r.Level</td>
                <td>@r.Category</td>
                <td>@r.Message</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<TansuCloud.Dashboard.Observability.Logging.LogRecord> recent = new();
    private StatusDto status = new();
    private int bufferCount;
    private int bufferCapacity;
    private string captureMinLevel = "";
    private bool runtimeEnabled;
    private string? filterLevel;
    private string? filterCategory;
    private int take = 200;
    private int skip = 0;
    private bool isSendingTest;
    private string? lastTestMessage;

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            error = null;
            // Call via Gateway using relative "/dashboard/api/*" so it works in-container too
            var statusUrl = new Uri("dashboard/api/admin/log-reporting/status", UriKind.Relative);
            var s = await Http.GetFromJsonAsync<StatusDto>(statusUrl);
            status = s ?? new();
            // Null-safe access in case the API payload is missing nested objects
            bufferCount = status.buffer?.Count ?? 0;
            bufferCapacity = status.buffer?.Capacity ?? 0;
            captureMinLevel = status.capture?.MinimumLevel ?? "";
            runtimeEnabled = status.runtime;
            lastTestMessage = null;

            var logsUrl = new Uri(
                $"dashboard/api/admin/logs/recent?take={take}&skip={skip}&level={Uri.EscapeDataString(filterLevel ?? string.Empty)}&categoryContains={Uri.EscapeDataString(filterCategory ?? string.Empty)}",
                UriKind.Relative
            );
            var logs = await Http.GetFromJsonAsync<List<TansuCloud.Dashboard.Observability.Logging.LogRecord>>(logsUrl);
            recent = logs ?? new();
        }
        catch (Exception ex)
        {
            // Avoid crashing the Blazor circuit; surface a concise error instead
            error = ex.Message;
            recent = new();
            status = new();
            bufferCount = 0;
            bufferCapacity = 0;
            captureMinLevel = "";
            lastTestMessage = null;
        }
        StateHasChanged();
    }

    private async Task Refresh()
    {
        await LoadAsync();
    }

    private async Task Toggle()
    {
        try
        {
            error = null;
            var toggleUrl = new Uri("dashboard/api/admin/log-reporting/toggle", UriKind.Relative);
            await Http.PostAsJsonAsync(toggleUrl, new { enabled = runtimeEnabled });
            await LoadAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private async Task ApplyFilters()
    {
        skip = Math.Max(0, skip);
        take = Math.Clamp(take, 1, 1000);
        await LoadAsync();
    }

    private async Task SendTestReport()
    {
        if (isSendingTest)
        {
            return;
        }

        try
        {
            isSendingTest = true;
            error = null;
            lastTestMessage = null;
            var testUrl = new Uri("dashboard/api/admin/log-reporting/test", UriKind.Relative);
            using var response = await Http.PostAsJsonAsync(testUrl, new { });
            if (!response.IsSuccessStatusCode)
            {
                var details = await response.Content.ReadAsStringAsync();
                throw new InvalidOperationException($"Test send failed ({(int)response.StatusCode}): {details}");
            }

            var payload = await response.Content.ReadFromJsonAsync<TestSendResponse>();
            lastTestMessage = payload is null
                ? "Test report sent."
                : $"Test report sent to {payload.target} (kind: {payload.kind}).";
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isSendingTest = false;
            StateHasChanged();
        }
    }

    private sealed class StatusDto
    {
        public bool configured { get; set; }
        public bool runtime { get; set; }
        public bool effective { get; set; }
        public int reportIntervalMinutes { get; set; }
        public string? mainServerUrl { get; set; }
        public string? severityThreshold { get; set; }
        public int queryWindowMinutes { get; set; }
        public int maxItems { get; set; }
        public int httpTimeoutSeconds { get; set; }
        public double warningSamplingPercent { get; set; }
        public string[]? allowedWarningCategories { get; set; }
        public bool pseudonymizeTenants { get; set; }
        public bool tenantHashSecretConfigured { get; set; }
        public string[]? reportKinds { get; set; }
        public CaptureDto capture { get; set; } = new();
        public BufferDto buffer { get; set; } = new();
    }
    private sealed class CaptureDto
    {
        public bool Enabled { get; set; }
        public string? MinimumLevel { get; set; }
        public int MaxBufferEntries { get; set; }
        public int MaxBatchSize { get; set; }
        public TimeSpan ReportInterval { get; set; }
    }
    private sealed class BufferDto
    {
        public int Capacity { get; set; }
        public int Count { get; set; }
    }

    private sealed class TestSendResponse
    {
        public bool sent { get; set; }
        public string? target { get; set; }
        public string? kind { get; set; }
    }
}
