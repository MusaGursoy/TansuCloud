@page "/admin/observability"
@layout AdminLayout
@using TansuCloud.Dashboard.Observability.SigNoz
@using MudBlazor
@using Microsoft.Extensions.Options
@inject ISigNozQueryService SigNozQuery
@inject ISnackbar Snackbar
@inject IOptionsMonitor<SigNozQueryOptions> SigNozOptions
@inject NavigationManager Navigation
@attribute [Authorize(Policy="AdminOnly")]

<PageTitle>Observability - TansuCloud Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Observability Dashboard</MudText>
    <MudText Typo="Typo.body1" Class="mb-4">
        View service health, topology, and recent errors. Deep dive into traces and logs via SigNoz integration.
    </MudText>

    <!-- Circuit Breaker / Degraded State Banner -->
    @if (_circuitBreakerState?.IsOpen == true)
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Class="mb-4" Icon="@Icons.Material.Filled.Error">
            <MudStack>
                <MudText Typo="Typo.subtitle1"><strong>SigNoz Unavailable - Using Cached Data</strong></MudText>
                <MudText Typo="Typo.body2">
                    The SigNoz service is currently unreachable. Displaying cached data which may be stale. 
                    Refresh buttons are disabled during circuit breaker cooldown.
                </MudText>
                <MudText Typo="Typo.body2">
                    Circuit will retry in: <strong>@(_circuitBreakerState.RemainingCooldownSeconds.ToString("F0")) seconds</strong>
                </MudText>
            </MudStack>
        </MudAlert>
    }

    <!-- Filters -->
    <MudCard Elevation="1" Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect T="int" @bind-Value="_selectedTimeRange" Label="Time Range" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Schedule">
                        <MudSelectItem Value="60">Last 1 Hour</MudSelectItem>
                        <MudSelectItem Value="360">Last 6 Hours</MudSelectItem>
                        <MudSelectItem Value="1440">Last 24 Hours</MudSelectItem>
                        <MudSelectItem Value="10080">Last 7 Days</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect T="string" @bind-Value="_selectedService" Label="Filter by Service" Variant="Variant.Outlined" Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.FilterAlt">
                        <MudSelectItem Value="@("all")">All Services</MudSelectItem>
                        @if (_allServiceNames != null)
                        {
                            @foreach (var svc in _allServiceNames)
                            {
                                <MudSelectItem Value="@svc">@svc</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4" Class="d-flex align-center">
                    <MudButton 
                        Variant="Variant.Filled" 
                        Color="Color.Primary" 
                        OnClick="ApplyFilters" 
                        StartIcon="@Icons.Material.Filled.Search"
                        Disabled="@(_circuitBreakerState?.IsOpen == true)">
                        Apply Filters
                    </MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="ResetFilters" Class="ml-2">
                        Reset
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <!-- Service Status Cards -->
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-3">Service Status</MudText>
        </MudItem>

        @if (_loading)
        {
            <MudItem xs="12" Class="d-flex justify-center align-center" Style="min-height: 200px;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
            </MudItem>
        }
        else if (_services != null && _services.Any())
        {
            @foreach (var service in _services)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="2">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@service.ServiceName</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton 
                                    Icon="@Icons.Material.Filled.Refresh" 
                                    Color="Color.Default" 
                                    Size="Size.Small" 
                                    OnClick="@(() => RefreshServiceStatus(service.ServiceName))" 
                                    Disabled="@(_circuitBreakerState?.IsOpen == true)" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="2">
                                <MudText Typo="Typo.body2">
                                    <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Small" Color="@GetErrorColor(service.ErrorRatePercent)" />
                                    Error Rate: <strong>@service.ErrorRatePercent.ToString("F2")%</strong>
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    <MudIcon Icon="@Icons.Material.Filled.Speed" Size="Size.Small" Color="Color.Info" />
                                    P95 Latency: <strong>@service.P95LatencyMs.ToString("F1")ms</strong>
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    <MudIcon Icon="@Icons.Material.Filled.QueryStats" Size="Size.Small" Color="Color.Default" />
                                    Requests: <strong>@service.RequestCount.ToString("N0")</strong>
                                </MudText>
                            </MudStack>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Text" OnClick="@(() => ViewServiceDetails(service.ServiceName))">Details</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">No service status data available. Ensure SigNoz is configured and services are reporting telemetry.</MudAlert>
            </MudItem>
        }
    </MudGrid>

    <!-- Service Topology Section -->
    <MudDivider Class="my-6" />
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-3">Service Topology</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudCard Elevation="2">
                <MudCardContent>
                    @if (_topology != null)
                    {
                        <MudText Typo="Typo.body1" Class="mb-3">
                            Services: <strong>@_topology.Nodes.Count</strong> | 
                            Dependencies: <strong>@_topology.Edges.Count</strong>
                        </MudText>
                        
                        @* Simple list view - visualization will be added in next iteration *@
                        <MudSimpleTable Hover="true" Dense="true" Striped="true">
                            <thead>
                                <tr>
                                    <th>Source Service</th>
                                    <th>Target Service</th>
                                    <th>Call Count</th>
                                    <th>Error Rate</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var edge in _topology.Edges)
                                {
                                    <tr>
                                        <td>@edge.SourceService</td>
                                        <td>@edge.TargetService</td>
                                        <td>@edge.CallCount.ToString("N0")</td>
                                        <td>
                                            <MudChip T="string" Size="Size.Small" Color="@GetErrorColor(edge.ErrorRate * 100)">
                                                @edge.ErrorRate.ToString("P1")
                                            </MudChip>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">Service topology data not available.</MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Saved Searches / Quick Links -->
    <MudDivider Class="my-6" />
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-3">Saved Searches</MudText>
        </MudItem>
        @foreach (var shortcut in _savedSearches)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2" Style="cursor: pointer;" @onclick="@(() => ApplySavedSearch(shortcut.Url))">
                    <MudCardContent>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudIcon Icon="@shortcut.Icon" Color="Color.Primary" />
                            <div>
                                <MudText Typo="Typo.subtitle1">@shortcut.Title</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@shortcut.Description</MudText>
                            </div>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    <!-- Correlated Logs Peek -->
    <MudDivider Class="my-6" />
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-3">Correlated Logs Peek</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="_traceId" Label="Trace ID" Variant="Variant.Outlined" />
                        <MudTextField @bind-Value="_spanId" Label="Span ID (optional)" Variant="Variant.Outlined" />
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@FetchCorrelatedLogs" Disabled="@string.IsNullOrWhiteSpace(_traceId)">
                            <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                            Fetch Logs
                        </MudButton>
                    </MudStack>

                    @if (_correlatedLogs != null && _correlatedLogs.Logs.Any())
                    {
                        <MudDivider Class="my-4" />
                        <MudText Typo="Typo.subtitle1" Class="mb-2">Found @_correlatedLogs.Logs.Count log(s)</MudText>
                        <MudSimpleTable Hover="true" Dense="true" Striped="true">
                            <thead>
                                <tr>
                                    <th>Timestamp</th>
                                    <th>Level</th>
                                    <th>Service</th>
                                    <th>Message</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in _correlatedLogs.Logs)
                                {
                                    <tr>
                                        <td>@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                        <td>
                                            <MudChip T="string" Size="Size.Small" Color="@GetLogLevelColor(log.Level)">@log.Level</MudChip>
                                        </td>
                                        <td>@log.ServiceName</td>
                                        <td style="max-width: 400px; overflow: hidden; text-overflow: ellipsis;">@log.Message</td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    }
                    else if (_correlatedLogsSearched)
                    {
                        <MudAlert Severity="Severity.Info" Class="mt-4">No logs found for this trace/span ID.</MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private bool _loading = true;
    private bool _correlatedLogsLoading = false;
    private bool _correlatedLogsSearched = false;
    
    private List<ServiceStatusResult>? _services;
    private ServiceTopologyResult? _topology;
    private CorrelatedLogsResult? _correlatedLogs;
    private List<string>? _allServiceNames;
    private CircuitBreakerState? _circuitBreakerState;
    
    private string _traceId = string.Empty;
    private string _spanId = string.Empty;
    
    // Filter state
    private int _selectedTimeRange = 60; // Default: 1 hour
    private string _selectedService = "all";

    private readonly List<SavedSearch> _savedSearches = new()
    {
        new("Recent Errors (Last 1h)", "View all errors from the last hour", Icons.Material.Filled.Error, "traces"),
        new("High Latency Requests", "Requests with P99 > 1s", Icons.Material.Filled.Speed, "traces"),
        new("OIDC Issues", "Authentication and token errors", Icons.Material.Filled.Lock, "logs"),
        new("Database Timeouts", "PostgreSQL connection issues", Icons.Material.Filled.Storage, "logs"),
        new("Redis Failures", "Cache connection problems", Icons.Material.Filled.Memory, "logs"),
        new("Gateway 5xx Errors", "Server errors at the gateway", Icons.Material.Filled.Warning, "traces")
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        _loading = true;
        try
        {
            // Check circuit breaker state before attempting to load data
            _circuitBreakerState = SigNozQuery.GetCircuitBreakerState();
            
            // Load service list first
            var serviceListResult = await SigNozQuery.GetServiceListAsync();
            _allServiceNames = serviceListResult.Services.Select(s => s.ServiceName).OrderBy(n => n).ToList();
            
            // Then load status for each service (or filtered service)
            if (_selectedService == "all" || string.IsNullOrWhiteSpace(_selectedService))
            {
                var statusTasks = serviceListResult.Services
                    .Select(s => SigNozQuery.GetServiceStatusAsync(s.ServiceName, timeRangeMinutes: _selectedTimeRange))
                    .ToList();
                
                _services = (await Task.WhenAll(statusTasks)).ToList();
            }
            else
            {
                var status = await SigNozQuery.GetServiceStatusAsync(_selectedService, timeRangeMinutes: _selectedTimeRange);
                _services = new List<ServiceStatusResult> { status };
            }

            // Load topology
            _topology = await SigNozQuery.GetServiceTopologyAsync();
            
            // Update circuit breaker state after successful load
            _circuitBreakerState = SigNozQuery.GetCircuitBreakerState();
        }
        catch (Exception ex)
        {
            // Update circuit breaker state on failure
            _circuitBreakerState = SigNozQuery.GetCircuitBreakerState();
            
            if (_circuitBreakerState?.IsOpen == true)
            {
                Snackbar.Add(
                    "SigNoz is unavailable. Displaying cached data if available.",
                    Severity.Warning
                );
            }
            else
            {
                Snackbar.Add($"Failed to load observability data: {ex.Message}", Severity.Error);
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ApplyFilters()
    {
        await LoadDashboardData();
        Snackbar.Add("Filters applied", Severity.Success);
    }

    private async Task ResetFilters()
    {
        _selectedTimeRange = 60;
        _selectedService = "all";
        await LoadDashboardData();
        Snackbar.Add("Filters reset", Severity.Info);
    }

    private async Task RefreshServiceStatus(string serviceName)
    {
        try
        {
            var updatedStatus = await SigNozQuery.GetServiceStatusAsync(serviceName, timeRangeMinutes: 60);
            var index = _services?.FindIndex(s => s.ServiceName == serviceName) ?? -1;
            if (index >= 0 && _services != null)
            {
                _services[index] = updatedStatus;
                StateHasChanged();
            }
            Snackbar.Add($"Refreshed status for {serviceName}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to refresh: {ex.Message}", Severity.Error);
        }
    }

    private async Task FetchCorrelatedLogs()
    {
        if (string.IsNullOrWhiteSpace(_traceId))
        {
            Snackbar.Add("Trace ID is required", Severity.Warning);
            return;
        }

        _correlatedLogsLoading = true;
        try
        {
            _correlatedLogs = await SigNozQuery.GetCorrelatedLogsAsync(_traceId, _spanId, limit: 10);
            _correlatedLogsSearched = true;
            if (_correlatedLogs.Logs.Any())
            {
                Snackbar.Add($"Found {_correlatedLogs.Logs.Count} log(s)", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to fetch logs: {ex.Message}", Severity.Error);
        }
        finally
        {
            _correlatedLogsLoading = false;
        }
    }

    private void ViewServiceDetails(string serviceName)
    {
        // TODO: Navigate to detailed service page or open modal
        Snackbar.Add($"Service details for {serviceName} - Coming soon", Severity.Info);
    }

    private void ApplySavedSearch(string searchType)
    {
        // Apply filters based on saved search type
        // Navigate to appropriate specialized page for detailed views
        switch (searchType)
        {
            case "traces":
                // Navigate to Trace Viewer for error traces
                Navigation.NavigateTo("/admin/observability/traces");
                break;
            
            case "logs":
                // Future: Navigate to Logs Explorer
                // For now, apply log filter on current page
                _selectedTimeRange = 60; // 1 hour
                _selectedService = "all";
                Snackbar.Add("Logs Explorer coming soon. Applied recent logs filter.", Severity.Info);
                _ = LoadDashboardData();
                break;
            
            default:
                _selectedTimeRange = 60; // 1 hour
                _selectedService = "all";
                Snackbar.Add($"Filter applied: {searchType}", Severity.Info);
                _ = LoadDashboardData();
                break;
        }
    }

    private Color GetErrorColor(double errorRatePercent)
    {
        return errorRatePercent switch
        {
            > 5.0 => Color.Error,
            > 1.0 => Color.Warning,
            _ => Color.Success
        };
    }

    private Color GetLogLevelColor(string level)
    {
        return level.ToLowerInvariant() switch
        {
            "error" or "critical" => Color.Error,
            "warning" => Color.Warning,
            "information" => Color.Info,
            _ => Color.Default
        };
    }

    private record SavedSearch(string Title, string Description, string Icon, string Url);
}
