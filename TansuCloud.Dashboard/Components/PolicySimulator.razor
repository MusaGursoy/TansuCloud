@using System.Net.Http.Json
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<PolicySimulator> Logger
@inject IConfiguration Configuration

<div class="policy-simulator">
    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="alert alert-danger">
            <strong>Simulation Error:</strong> @_error
        </div>
    }

    <h6>Request Configuration</h6>
    <div class="row mb-3">
        <div class="col-md-8">
            <label class="form-label">URL Path <span class="text-danger">*</span></label>
            <input type="text" class="form-control" @bind="_requestUrl" 
                   placeholder="/api/data?page=1&filter=active" />
            <small class="form-text text-muted">Example: /api/data?page=1&filter=active</small>
        </div>
        <div class="col-md-4">
            <label class="form-label">HTTP Method</label>
            <select class="form-select" @bind="_requestMethod">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
            </select>
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Request Headers (one per line, format: Name: Value)</label>
        <textarea class="form-control font-monospace" rows="4" @bind="_requestHeaders" 
                  placeholder="Authorization: Bearer token123&#10;Accept-Language: en-US&#10;Host: example.com"></textarea>
        <small class="form-text text-muted">Optional headers to include in simulation</small>
    </div>

    @if (PolicyType == 4)
    {
        <div class="mb-3">
            <label class="form-label">Authenticated User ID (for PerUser partition)</label>
            <input type="text" class="form-control" @bind="_authenticatedUserId" 
                   placeholder="user@example.com" />
            <small class="form-text text-muted">Required only for PerUser partition strategy</small>
        </div>
    }

    <div class="d-flex justify-content-between mb-4">
        <button class="btn btn-primary" @onclick="RunSimulation" disabled="@_simulating">
            @if (_simulating)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
            <i class="bi bi-play-circle"></i> Run Simulation
        </button>
        <button class="btn btn-outline-secondary" @onclick="ClearResults">
            <i class="bi bi-x-circle"></i> Clear Results
        </button>
    </div>

    @if (_result != null)
    {
        <div class="simulation-results">
            <h6>Simulation Results</h6>
            
            @if (PolicyType == 3)
            {
                <!-- Cache Results -->
                <div class="alert @(_result.CacheHit == true ? "alert-success" : "alert-info")">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Cache Verdict:</strong>
                            @if (_result.CacheHit == true)
                            {
                                <span class="badge bg-success ms-2">HIT</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary ms-2">MISS</span>
                            }
                        </div>
                        <div class="col-md-6">
                            <strong>TTL:</strong> @_result.TtlSeconds seconds
                        </div>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <strong>Cache Key</strong>
                    </div>
                    <div class="card-body">
                        <code class="text-break">@_result.CacheKey</code>
                    </div>
                </div>

                @if (_result.VaryByParameters?.Any() == true)
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <strong>VaryBy Parameters</strong>
                        </div>
                        <div class="card-body">
                            <ul class="mb-0">
                                @foreach (var param in _result.VaryByParameters)
                                {
                                    <li><code>@param</code></li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            }
            else if (PolicyType == 4)
            {
                <!-- Rate Limit Results -->
                <div class="alert @(_result.Allowed == true ? "alert-success" : "alert-danger")">
                    <div class="row">
                        <div class="col-md-4">
                            <strong>Verdict:</strong>
                            @if (_result.Allowed == true)
                            {
                                <span class="badge bg-success ms-2">ALLOWED</span>
                            }
                            else
                            {
                                <span class="badge bg-danger ms-2">DENIED (429)</span>
                            }
                        </div>
                        <div class="col-md-4">
                            <strong>Permits Remaining:</strong> @_result.PermitsRemaining / @_result.PermitLimit
                        </div>
                        <div class="col-md-4">
                            <strong>Window:</strong> @_result.WindowSeconds seconds
                        </div>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <strong>Partition Key</strong>
                    </div>
                    <div class="card-body">
                        <code class="text-break">@_result.PartitionKey</code>
                    </div>
                </div>

                @if (_result.RetryAfterSeconds.HasValue)
                {
                    <div class="alert alert-warning mt-3">
                        <strong>Retry-After:</strong> @_result.RetryAfterSeconds.Value seconds
                        <br/>
                        <small>Client should wait before retrying.</small>
                    </div>
                }
            }

            @if (!string.IsNullOrWhiteSpace(_result.Message))
            {
                <div class="alert alert-info mt-3">
                    <strong>Info:</strong> @_result.Message
                </div>
            }
        </div>
    }
</div>

<style>
    .policy-simulator {
        padding: 1rem;
    }
    
    .simulation-results {
        border-top: 2px solid #dee2e6;
        padding-top: 1rem;
    }
</style>

@code {
    [Parameter]
    public string? PolicyId { get; set; }

    [Parameter]
    public int PolicyType { get; set; } // 3 = Cache, 4 = RateLimit

    [Parameter]
    public JsonElement? PolicyConfig { get; set; }

    // Request state
    private string _requestUrl = "/api/data?page=1";
    private string _requestMethod = "GET";
    private string _requestHeaders = string.Empty;
    private string _authenticatedUserId = string.Empty;

    // Simulation state
    private bool _simulating;
    private string? _error;
    private SimulationResult? _result;

    private class SimulationResult
    {
        // Cache fields
        public bool? CacheHit { get; set; }
        public string? CacheKey { get; set; }
        public int? TtlSeconds { get; set; }
        public List<string>? VaryByParameters { get; set; }

        // Rate limit fields
        public bool? Allowed { get; set; }
        public string? PartitionKey { get; set; }
        public int? PermitLimit { get; set; }
        public int? PermitsRemaining { get; set; }
        public int? WindowSeconds { get; set; }
        public int? RetryAfterSeconds { get; set; }

        // Common
        public string? Message { get; set; }
    } // End of Class SimulationResult

    private async Task RunSimulation()
    {
        try
        {
            _simulating = true;
            _error = null;
            _result = null;

            if (string.IsNullOrWhiteSpace(_requestUrl))
            {
                _error = "URL path is required.";
                return;
            }

            if (PolicyConfig == null)
            {
                _error = "Policy configuration is required.";
                return;
            }

            var headers = ParseHeaders(_requestHeaders);
            
            var requestPayload = new
            {
                policyId = PolicyId,
                config = PolicyConfig,
                request = new
                {
                    url = _requestUrl,
                    method = _requestMethod,
                    headers = headers,
                    userId = string.IsNullOrWhiteSpace(_authenticatedUserId) ? null : _authenticatedUserId
                }
            };

            var client = HttpClientFactory.CreateClient("GatewayAdmin");
            var endpoint = PolicyType == 3 
                ? "/admin/api/policies/simulate/cache" 
                : "/admin/api/policies/simulate/rate-limit";

            var response = await client.PostAsJsonAsync(endpoint, requestPayload);
            
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                _error = $"Simulation failed: {error}";
                return;
            }

            var json = await response.Content.ReadAsStringAsync();
            _result = JsonSerializer.Deserialize<SimulationResult>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to run policy simulation");
            _error = $"Error: {ex.Message}";
        }
        finally
        {
            _simulating = false;
        }
    } // End of Method RunSimulation

    private void ClearResults()
    {
        _result = null;
        _error = null;
    } // End of Method ClearResults

    private Dictionary<string, string> ParseHeaders(string headersText)
    {
        var headers = new Dictionary<string, string>();
        if (string.IsNullOrWhiteSpace(headersText))
            return headers;

        var lines = headersText.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        foreach (var line in lines)
        {
            var parts = line.Split(':', 2, StringSplitOptions.TrimEntries);
            if (parts.Length == 2)
            {
                headers[parts[0]] = parts[1];
            }
        }

        return headers;
    } // End of Method ParseHeaders
} // End of Code
