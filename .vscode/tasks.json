{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "build-sln",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false
		},
		{
			"label": "Run all E2E tests",
			"type": "shell",
			"command": "dotnet test .\\tests\\TansuCloud.E2E.Tests\\TansuCloud.E2E.Tests.csproj -c Debug",
			"group": "build",
			"dependsOn": [
				"SigNoz: readiness probe"
			],
			"dependsOrder": "sequence"
		},
		{
			"label": "SigNoz: readiness probe",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-File",
				"${workspaceFolder}/dev/tools/sigNoz-ready.ps1"
			]
		},
		{
			"label": "Run health E2E tests",
			"type": "shell",
			"command": "dotnet test .\\tests\\TansuCloud.E2E.Tests\\TansuCloud.E2E.Tests.csproj -c Debug --filter FullyQualifiedName~TansuCloud.E2E.Tests.HealthEndpointsE2E",
			"group": "build"
		},
		{
			"label": "dev: up",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Import-TansuDotEnv | Out-Null; dotnet build .\\TansuCloud.sln -c Debug; Start-Job -Name tansu-identity -ScriptBlock { dotnet run --no-build --project .\\TansuCloud.Identity\\TansuCloud.Identity.csproj -c Debug } | Out-Null; Start-Job -Name tansu-dashboard -ScriptBlock { dotnet run --no-build --project .\\TansuCloud.Dashboard\\TansuCloud.Dashboard.csproj -c Debug } | Out-Null; Start-Job -Name tansu-database -ScriptBlock { dotnet run --no-build --project .\\TansuCloud.Database\\TansuCloud.Database.csproj -c Debug } | Out-Null; Start-Job -Name tansu-storage -ScriptBlock { dotnet run --no-build --project .\\TansuCloud.Storage\\TansuCloud.Storage.csproj -c Debug } | Out-Null; Start-Sleep -Seconds 15; dotnet run --no-build --project .\\TansuCloud.Gateway\\TansuCloud.Gateway.csproj -c Debug }"
			],
			"group": "build",
			"isBackground": true
		},
		{
			"label": "dev: down",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; $jobs = Get-Job | Where-Object { $_.Name -like 'tansu-*' }; if ($jobs) { $jobs | Stop-Job -Force; $jobs | Remove-Job }; Get-Process -Name 'TansuCloud.Gateway' -ErrorAction SilentlyContinue | Stop-Process -Force }"
			],
			"group": "build"
		},
		{
			"label": "PgCat: SHOW DATABASES",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Import-TansuDotEnv | Out-Null; $u=$env:POSTGRES_USER; $p=$env:POSTGRES_PASSWORD; if (-not $u -or -not $p) { throw 'Set POSTGRES_USER and POSTGRES_PASSWORD in your environment or .env'; }; $cmd=\"PGPASSWORD=$p psql -h tansu-pgcat -p 6432 -U $u -d postgres -c 'SHOW DATABASES;'\"; docker exec tansu-postgres bash -lc $cmd }"
			]
		},
		{
			"label": "Provision tenant via Gateway (dev bypass)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Import-TansuDotEnv | Out-Null; $urls = Resolve-TansuBaseUrls -PreferLoopbackForGateway; $gateway = $urls.GatewayBaseUrl; if ([string]::IsNullOrWhiteSpace($gateway)) { throw 'GATEWAY_BASE_URL not set. Update .env.' }; $uri = $gateway.TrimEnd('/') + '/db/api/provisioning/tenants'; Invoke-RestMethod -Method Post -Uri $uri -Headers @{ 'X-Provision-Key'='letmein'; 'Content-Type'='application/json' } -Body '{\"tenantId\":\"acme-dev\",\"displayName\":\"Acme Dev\"}' | ConvertTo-Json -Depth 5 }"
			]
		},
		{
			"label": "compose: up",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Invoke-TansuCompose up '-d' '--build' }"
			],
			"group": "build"
		},
		{
			"label": "compose: down",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Invoke-TansuCompose down '-v' }"
			],
			"group": "build"
		},
		{
			"label": "compose: logs (gateway)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Invoke-TansuCompose logs '-f' gateway }"
			],
			"isBackground": true
		},
		{
			"label": "compose: up (prod only)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; $composeFile = Join-Path \"${workspaceFolder}\" 'docker-compose.prod.yml'; Invoke-TansuCompose -ComposeFile $composeFile up '-d' '--build' }"
			],
			"group": "build"
		},
		{
			"label": "compose: up (prod + observability)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; $composeFile = Join-Path \"${workspaceFolder}\" 'docker-compose.prod.yml'; Invoke-TansuCompose -ComposeFile $composeFile '--profile' 'observability' 'up' '-d' '--build' }"
			],
			"group": "build"
		},
		{
			"label": "compose: down (prod)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; $composeFile = Join-Path \"${workspaceFolder}\" 'docker-compose.prod.yml'; Invoke-TansuCompose -ComposeFile $composeFile down '-v' }"
			],
			"group": "build"
		},
		{
			"label": "PgCat: health (process present)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference=Stop; $out = docker exec tansu-pgcat cat /proc/1/cmdline; if ($null -ne $out -and ($out | Out-String).Contains(\"pgcat\")) { Write-Host \"pgcat running\" } else { throw \"pgcat not running\" } }"
			],
			"group": "build"
		},
		{
			"label": "compose: up infra (pg + redis + pgcat)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Invoke-TansuCompose up '-d' postgres redis pgcat pgcat-config }"
			],
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "compose: up apps",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Invoke-TansuCompose up '-d' identity dashboard db storage telemetry gateway }"
			],
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Run health E2E tests",
			"type": "shell",
			"command": "dotnet test .\\tests\\TansuCloud.E2E.Tests\\TansuCloud.E2E.Tests.csproj -c Debug --filter FullyQualifiedName~TansuCloud.E2E.Tests.HealthEndpointsE2E"
		},
		{
			"label": "compose: validate config",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"{ $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Invoke-TansuCompose config | Out-String -Width 4096 }"
			]
		},
		{
			"label": "compose: validate prod config",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"{ $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; $composeFile = Join-Path \"${workspaceFolder}\" 'docker-compose.prod.yml'; Invoke-TansuCompose -ComposeFile $composeFile config | Out-String -Width 4096 }"
			]
		},
		{
			"label": "Loopback guard test",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; dotnet test .\\tests\\TansuCloud.E2E.Tests\\TansuCloud.E2E.Tests.csproj -c Debug --filter FullyQualifiedName~TansuCloud.E2E.Tests.LoopbackLiteralGuardTests.Loopback_literals_are_not_reintroduced_outside_allowlist }"
			]
		},
		{
			"label": "Task 40 verification",
			"type": "shell",
			"dependsOn": [
				"Loopback guard test",
				"compose: validate config",
				"compose: validate prod config"
			],
			"dependsOrder": "sequence",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; Import-TansuDotEnv | Out-Null; Write-Host 'Task 40 verification completed.' }"
			]
		},
		{
			"label": "Run Task 11 verification tests",
			"type": "shell",
			"command": "dotnet",
			"args": [
				"test",
				"tests/TansuCloud.E2E.Tests/TansuCloud.E2E.Tests.csproj",
				"-c",
				"Debug",
				"--filter",
				"\"(FullyQualifiedName~TansuCloud.E2E.Tests.GatewayAliasTests|FullyQualifiedName~TansuCloud.E2E.Tests.ProvisioningE2E)\""
			]
		},
		{
			"label": "Run alias test (ad-hoc)",
			"type": "shell",
			"command": "dotnet test .\\tests\\TansuCloud.E2E.Tests\\TansuCloud.E2E.Tests.csproj -c Debug --filter FullyQualifiedName~TansuCloud.E2E.Tests.GatewayAliasTests.Gateway_LoginAlias_Returns_LoginForm"
		},
		{
			"label": "Run alias test",
			"type": "shell",
			"command": "dotnet",
			"args": [
				"test",
				"tests/TansuCloud.E2E.Tests/TansuCloud.E2E.Tests.csproj",
				"-c",
				"Debug",
				"--filter",
				"FullyQualifiedName~TansuCloud.E2E.Tests.GatewayAliasTests.Gateway_LoginAlias_Returns_LoginForm"
			],
			"group": "build"
		},
		{
			"label": "Run provisioning test",
			"type": "shell",
			"command": "dotnet test .\\tests\\TansuCloud.E2E.Tests\\TansuCloud.E2E.Tests.csproj -c Debug --filter FullyQualifiedName~TansuCloud.E2E.Tests.ProvisioningE2E.Provision_Tenant_Idempotent"
		},
		{
			"label": "Run dashboard WS soak (50x, 3min)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-File",
				"${workspaceFolder}/dev/tools/run-ws-soak.ps1",
				"-Sessions",
				"50",
				"-Minutes",
				"3"
			],
			"group": "build"
		},
		{
			"label": "temp: build-sln",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: build-dashboard",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.Dashboard\\TansuCloud.Dashboard.csproj -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: build-sln",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug"
		},
		{
			"label": "temp: build-sln (metrics scaffolding)",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: build-sln (wire metrics nav + cache)",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: quick build",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: run metrics smoke",
			"type": "shell",
			"command": "dotnet",
			"args": [
				"test",
				"tests/TansuCloud.E2E.Tests/TansuCloud.E2E.Tests.csproj",
				"-c",
				"Debug",
				"--filter",
				"FullyQualifiedName~TansuCloud.E2E.Tests.DashboardMetricsSmoke.Metrics_Page_Renders"
			],
			"group": "build"
		},
		{
			"label": "temp: build-sln (corr-tests + link)",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: build-sln (fix Program partial + tests)",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: build-sln (retry)",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: build-sln (corr echo)",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: build-sln (fix storage using)",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "SigNoz: readiness + run E2E",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-File",
				"${workspaceFolder}/dev/tools/sigNoz-run-exception-e2e.ps1"
			],
			"group": "build"
		},
		{
			"label": "SigNoz: governance (dry-run)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . '${workspaceFolder}/dev/tools/common.ps1'; Import-TansuDotEnv | Out-Null; pwsh -NoProfile -File '${workspaceFolder}/dev/tools/signoz-apply-governance.ps1' -DefaultsPath '${workspaceFolder}/SigNoz/governance.dev.json' }"
			]
		},
		{
			"label": "SigNoz: governance (apply)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . '${workspaceFolder}/dev/tools/common.ps1'; Import-TansuDotEnv | Out-Null; pwsh -NoProfile -File '${workspaceFolder}/dev/tools/signoz-apply-governance.ps1' -DefaultsPath '${workspaceFolder}/SigNoz/governance.dev.json' -Apply }"
			]
		},
		{
			"label": "temp: validate prod compose",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; $composeFile = Join-Path \"${workspaceFolder}\" 'docker-compose.prod.yml'; Invoke-TansuCompose -ComposeFile $composeFile config | Out-String -Width 4096 }"
			]
		},
		{
			"label": "temp: validate prod compose again",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; $composeFile = Join-Path \"${workspaceFolder}\" 'docker-compose.prod.yml'; Invoke-TansuCompose -ComposeFile $composeFile config | Out-String -Width 4096 }"
			]
		},
		{
			"label": "temp: validate prod compose (final)",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-Command",
				"& { $ErrorActionPreference='Stop'; . \"${workspaceFolder}/dev/tools/common.ps1\"; $composeFile = Join-Path \"${workspaceFolder}\" 'docker-compose.prod.yml'; Invoke-TansuCompose -ComposeFile $composeFile config | Out-String -Width 4096 }"
			]
		},
		{
			"label": "temp: build after audit sdk",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: rebuild after fixes",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: rebuild after 'with' fix",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: rebuild again",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "temp: rebuild after helpers",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "compose: up + wait + health E2E",
			"type": "shell",
			"command": "pwsh",
			"args": [
				"-NoProfile",
				"-File",
				"${workspaceFolder}/dev/tools/compose-run-health-e2e.ps1"
			],
			"group": "build"
		},
		{
			"label": "temp: quick build (health smoke)",
			"type": "shell",
			"command": "dotnet build .\\TansuCloud.sln -c Debug",
			"isBackground": false,
			"group": "build"
		}
	]
}